{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "768717401711632373"
    }
  },
  "parameters": {
    "location": {
      "type": "string"
    },
    "applicationName": {
      "type": "string"
    },
    "environment": {
      "type": "string"
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "jumphostAdministratorPassword": {
      "type": "secureString"
    },
    "sqlServerAdministratorPassword": {
      "type": "secureString"
    }
  },
  "variables": {
    "defaultTags": "[union(createObject('applicationName', parameters('applicationName'), 'environment', parameters('environment')), parameters('tags'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('defaultTags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "NamingDeployment",
      "resourceGroup": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "suffix": {
            "value": [
              "[parameters('applicationName')]",
              "[parameters('environment')]"
            ]
          },
          "uniqueLength": {
            "value": 6
          },
          "uniqueSeed": {
            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}', parameters('applicationName'), parameters('environment')))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.5.6.12127",
              "templateHash": "8484155815702961128"
            }
          },
          "parameters": {
            "prefix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is not recommended that you use prefix by azure you should be using a suffix for your resources."
              }
            },
            "suffix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is recommended that you specify a suffix for consistency. Please use only lowercase characters when possible."
              }
            },
            "uniqueSeed": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]",
              "metadata": {
                "description": "Optional. Custom seed value for the unique string to be created -defaults to resourceGroup Id."
              }
            },
            "uniqueLength": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. Max length of the uniqueness suffix to be added -defaults to 4"
              }
            },
            "useDashes": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Use dashes as separator where applicable -defaults to true"
              }
            },
            "useLowerCase": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Create names using lowercase letters -defaults to true"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Used when region abbreviation is needed (placeholder value is \"**location**)"
              }
            }
          },
          "variables": {
            "uniquePart": "[substring(uniqueString(parameters('uniqueSeed')), 0, parameters('uniqueLength'))]",
            "delimiter": "[if(parameters('useDashes'), '-', '')]",
            "locationPlaceholder": "**location**",
            "regionAbbreviations": {
              "australiacentral": "auc",
              "australiacentral2": "auc2",
              "australiaeast": "aue",
              "australiasoutheast": "ause",
              "brazilsouth": "brs",
              "brazilsoutheast": "brse",
              "canadacentral": "canc",
              "canadaeast": "cane",
              "centralindia": "cin",
              "centralus": "cus",
              "centraluseuap": "cuseuap",
              "eastasia": "ea",
              "eastus": "eus",
              "eastus2": "eus2",
              "eastus2euap": "eus2euap",
              "francecentral": "frc",
              "francesouth": "frs",
              "germanynorth": "gern",
              "germanywestcentral": "gerwc",
              "japaneast": "jae",
              "japanwest": "jaw",
              "jioindiacentral": "jioinc",
              "jioindiawest": "jioinw",
              "koreacentral": "koc",
              "koreasouth": "kors",
              "northcentralus": "ncus",
              "northeurope": "neu",
              "norwayeast": "nore",
              "norwaywest": "norw",
              "southafricanorth": "san",
              "southafricawest": "saw",
              "southcentralus": "scus",
              "southeastasia": "sea",
              "southindia": "sin",
              "swedencentral": "swc",
              "switzerlandnorth": "swn",
              "switzerlandwest": "sww",
              "uaecentral": "uaec",
              "uaenorth": "uaen",
              "uksouth": "uks",
              "ukwest": "ukw",
              "westcentralus": "wcus",
              "westeurope": "weu",
              "westindia": "win",
              "westus": "wus",
              "westus2": "wus2",
              "westus3": "wus3"
            },
            "strPrefixJoined": "[if(empty(parameters('prefix')), '', format('{0}{1}', replace(replace(replace(string(parameters('prefix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter')), variables('delimiter')))]",
            "strPrefixInterim": "[if(parameters('useLowerCase'), toLower(variables('strPrefixJoined')), variables('strPrefixJoined'))]",
            "strPrefix": "[replace(variables('strPrefixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "strSuffixJoined": "[if(empty(parameters('suffix')), '', format('{0}{1}', variables('delimiter'), replace(replace(replace(string(parameters('suffix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter'))))]",
            "strSuffixInterim": "[if(parameters('useLowerCase'), toLower(variables('strSuffixJoined')), variables('strSuffixJoined'))]",
            "strSuffix": "[replace(variables('strSuffixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "placeholder": "[[****]",
            "nameTemplate": "[format('{0}{1}{2}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'))]",
            "nameUniqueTemplate": "[format('{0}{1}{2}{3}{4}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'), variables('delimiter'), variables('uniquePart'))]",
            "nameSafeTemplate": "[toLower(replace(variables('nameTemplate'), variables('delimiter'), ''))]",
            "nameUniqueSafeTemplate": "[toLower(replace(variables('nameUniqueTemplate'), variables('delimiter'), ''))]",
            "d": "[variables('delimiter')]",
            "ph": "[variables('placeholder')]",
            "nt": "[variables('nameTemplate')]",
            "nut": "[variables('nameUniqueTemplate')]",
            "nst": "[variables('nameSafeTemplate')]",
            "nust": "[variables('nameUniqueSafeTemplate')]",
            "names": {
              "analysisServicesServer": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'as'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'as'), 63)]",
                "slug": "as"
              },
              "apiManagement": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'apim'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'apim'), 50)]",
                "slug": "apim"
              },
              "appConfiguration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'appcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'appcg'), 50))]",
                "slug": "appcg"
              },
              "appServiceEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nt'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nt'), variables('ph'), 'ase'), 36))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nut'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nut'), variables('ph'), 'ase'), 36))]",
                "slug": "ase"
              },
              "appServicePlan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'plan'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'plan'), 40))]",
                "slug": "plan"
              },
              "appService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'app'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'app'), 60))]",
                "slug": "app"
              },
              "applicationGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'agw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'agw'), 80))]",
                "slug": "agw"
              },
              "applicationInsights": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'appi'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'appi'), 260))]",
                "slug": "appi"
              },
              "applicationSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'asg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'asg'), 80))]",
                "slug": "asg"
              },
              "automationAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'aa'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'aa'), 50))]",
                "slug": "aa"
              },
              "automationCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacert'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacert'), 128))]",
                "slug": "aacert"
              },
              "automationCredential": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 128))]",
                "slug": "aacred"
              },
              "automationRunbook": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 63))]",
                "slug": "aacred"
              },
              "automationSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aasched'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aasched'), 128))]",
                "slug": "aasched"
              },
              "automationVariable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aavar'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aavar'), 128))]",
                "slug": "aavar"
              },
              "availabilitySet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'avail'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'avail'), 80))]",
                "slug": "avail"
              },
              "bastionHost": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'bas'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'bas'), 80))]",
                "slug": "bas"
              },
              "batchAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'ba'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'ba'), 24)]",
                "slug": "ba"
              },
              "batchApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'baapp'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'baapp'), 64))]",
                "slug": "baapp"
              },
              "batchCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nt'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nt'), variables('ph'), 'bacert'), 45))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nut'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nut'), variables('ph'), 'bacert'), 45))]",
                "slug": "bacert"
              },
              "batchPool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'bapool'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'bapool'), 24))]",
                "slug": "bapool"
              },
              "botChannelDirectline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botline'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botline'), 64))]",
                "slug": "botline"
              },
              "botChannelEmail": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botmail'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botmail'), 64))]",
                "slug": "botmail"
              },
              "botChannelMsTeams": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botteams'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botteams'), 64))]",
                "slug": "botteams"
              },
              "botChannelSlack": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botslack'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botslack'), 64))]",
                "slug": "botslack"
              },
              "botChannelsRegistration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botchan'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botchan'), 64))]",
                "slug": "botchan"
              },
              "botConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botcon'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botcon'), 64))]",
                "slug": "botcon"
              },
              "botWebApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'bot'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'bot'), 64))]",
                "slug": "bot"
              },
              "cdnEndpoint": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'cdn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'cdn'), 50))]",
                "slug": "cdn"
              },
              "cdnProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260))]",
                "slug": "cdnprof"
              },
              "cognitiveAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cog'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cog'), 64))]",
                "slug": "cog"
              },
              "containerApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'capp'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'capp'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'capp'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'capp'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'capp'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'capp'), 64))]",
                "slug": "capp"
              },
              "containerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cg'), 63))]",
                "slug": "cg"
              },
              "containerRegistry": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'acr'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'acr'), 63)]",
                "slug": "acr"
              },
              "containerRegistryWebhook": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'crwh'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'crwh'), 50)]",
                "slug": "crwh"
              },
              "cosmosdbAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cosmos'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cosmos'), 63))]",
                "slug": "cosmos"
              },
              "customProvider": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'prov'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'prov'), 64))]",
                "slug": "prov"
              },
              "dashboard": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nt'), variables('ph'), 'dsb'), 160))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nut'), variables('ph'), 'dsb'), 160))]",
                "slug": "dsb"
              },
              "dataFactory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adf'), 63))]",
                "slug": "adf"
              },
              "dataFactoryDatasetMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260))]",
                "slug": "adfmysql"
              },
              "dataFactoryDatasetPostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260))]",
                "slug": "adfpsql"
              },
              "dataFactoryDatasetSqlServerTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260))]",
                "slug": "adfmssql"
              },
              "dataFactoryIntegrationRuntimeManaged": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adfir'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adfir'), 63))]",
                "slug": "adfir"
              },
              "dataFactoryLinkedServiceDataLakeStorageGen2": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260))]",
                "slug": "adfsvst"
              },
              "dataFactoryLinkedServiceKeyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260))]",
                "slug": "adfsvkv"
              },
              "dataFactoryLinkedServiceMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260))]",
                "slug": "adfsvmysql"
              },
              "dataFactoryLinkedServicePostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260))]",
                "slug": "adfsvpsql"
              },
              "dataFactoryLinkedServiceSqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260))]",
                "slug": "adfsvmssql"
              },
              "dataFactoryPipeline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpl'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpl'), 260))]",
                "slug": "adfpl"
              },
              "dataFactoryTriggerSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adftg'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adftg'), 260))]",
                "slug": "adftg"
              },
              "dataLakeAnalyticsAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dla'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dla'), 24)]",
                "slug": "dla"
              },
              "dataLakeAnalyticsFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlfw'), 50))]",
                "slug": "dlfw"
              },
              "dataLakeStore": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dls'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dls'), 24)]",
                "slug": "dls"
              },
              "dataLakeStoreFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50))]",
                "slug": "dlsfw"
              },
              "databaseMigrationProject": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nt'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nt'), variables('ph'), 'migr'), 57))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nut'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nut'), variables('ph'), 'migr'), 57))]",
                "slug": "migr"
              },
              "databaseMigrationService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nt'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nt'), variables('ph'), 'dms'), 62))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nut'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nut'), variables('ph'), 'dms'), 62))]",
                "slug": "dms"
              },
              "databricksWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nt'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nt'), variables('ph'), 'dbw'), 30))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nut'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nut'), variables('ph'), 'dbw'), 30))]",
                "slug": "dbw"
              },
              "devTestLab": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'lab'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'lab'), 50))]",
                "slug": "lab"
              },
              "devTestLinuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 64))]",
                "slug": "labvm"
              },
              "devTestWindowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 15))]",
                "slug": "labvm"
              },
              "diskEncryptionSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'des'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'des'), 80))]",
                "slug": "des"
              },
              "dnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'dns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'dns'), 63))]",
                "slug": "dns"
              },
              "eventGridDomain": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egd'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egd'), 50))]",
                "slug": "egd"
              },
              "eventGridDomainTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egdt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egdt'), 50))]",
                "slug": "egdt"
              },
              "eventGridEventSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'egs'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'egs'), 64))]",
                "slug": "egs"
              },
              "eventGridTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egt'), 50))]",
                "slug": "egt"
              },
              "eventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'evh'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'evh'), 50))]",
                "slug": "evh"
              },
              "eventHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehar'), 50))]",
                "slug": "ehar"
              },
              "eventHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehcg'), 50))]",
                "slug": "ehcg"
              },
              "eventHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehn'), 50))]",
                "slug": "ehn"
              },
              "eventHubNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehnar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehnar'), 50))]",
                "slug": "ehnar"
              },
              "eventHubNamespaceDisasterRecoveryConfig": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehdr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehdr'), 50))]",
                "slug": "ehdr"
              },
              "expressRouteCircuit": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'erc'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'erc'), 80))]",
                "slug": "erc"
              },
              "expressRouteGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'ergw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'ergw'), 80))]",
                "slug": "ergw"
              },
              "firewall": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afw'), 80))]",
                "slug": "afw"
              },
              "firewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afwp'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afwp'), 80))]",
                "slug": "afwp"
              },
              "frontDoor": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'fd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'fd'), 64))]",
                "slug": "fd"
              },
              "frontDoorFirewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'fdfw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'fdfw'), 80))]",
                "slug": "fdfw"
              },
              "functionApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'func'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'func'), 60))]",
                "slug": "func"
              },
              "hdInsightHadoopCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hadoop'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hadoop'), 59))]",
                "slug": "hadoop"
              },
              "hdInsightHbaseCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hbase'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hbase'), 59))]",
                "slug": "hbase"
              },
              "hdInsightInteractiveQueryCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'iqr'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'iqr'), 59))]",
                "slug": "iqr"
              },
              "hdInsightKafkaCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'kafka'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'kafka'), 59))]",
                "slug": "kafka"
              },
              "hdInsightMlServicesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'mls'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'mls'), 59))]",
                "slug": "mls"
              },
              "hdInsightRserverCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'rsv'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'rsv'), 59))]",
                "slug": "rsv"
              },
              "hdInsightSparkCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'spark'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'spark'), 59))]",
                "slug": "spark"
              },
              "hdInsightStormCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'storm'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'storm'), 59))]",
                "slug": "storm"
              },
              "image": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'img'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'img'), 80))]",
                "slug": "img"
              },
              "iotCentralApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'iotapp'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'iotapp'), 63))]",
                "slug": "iotapp"
              },
              "iotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iot'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iot'), 50))]",
                "slug": "iot"
              },
              "iotHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iotcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iotcg'), 50))]",
                "slug": "iotcg"
              },
              "iotHubDps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dps'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dps'), 64))]",
                "slug": "dps"
              },
              "iotHubDpsCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dpscert'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dpscert'), 64))]",
                "slug": "dpscert"
              },
              "keyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'kv'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'kv'), 24))]",
                "slug": "kv"
              },
              "keyVaultCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvc'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvc'), 127))]",
                "slug": "kvc"
              },
              "keyVaultKey": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvk'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvk'), 127))]",
                "slug": "kvk"
              },
              "keyVaultSecret": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvs'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvs'), 127))]",
                "slug": "kvs"
              },
              "kubernetesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aks'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aks'), 63))]",
                "slug": "aks"
              },
              "kustoCluster": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'kc'), 22)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'kc'), 22)]",
                "slug": "kc"
              },
              "kustoDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'kdb'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'kdb'), 260))]",
                "slug": "kdb"
              },
              "kustoEventHubDataConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'kehc'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'kehc'), 40))]",
                "slug": "kehc"
              },
              "loadBalancer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lb'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lb'), 80))]",
                "slug": "lb"
              },
              "loadBalancerNatRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80))]",
                "slug": "lbnatrl"
              },
              "linuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 64))]",
                "slug": "vm"
              },
              "linuxVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 64))]",
                "slug": "vmss"
              },
              "localNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lgw'), 80))]",
                "slug": "lgw"
              },
              "logAnalyticsWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'log'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'log'), 63))]",
                "slug": "log"
              },
              "machineLearningWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'mlw'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'mlw'), 260))]",
                "slug": "mlw"
              },
              "managedDisk": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'dsk'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'dsk'), 80))]",
                "slug": "dsk"
              },
              "mapsAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nt'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nt'), variables('ph'), 'map'), 98))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nut'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nut'), variables('ph'), 'map'), 98))]",
                "slug": "map"
              },
              "mariadbDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mariadb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mariadb'), 63))]",
                "slug": "mariadb"
              },
              "mariadbFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariafw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariafw'), 128))]",
                "slug": "mariafw"
              },
              "mariadbServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'maria'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'maria'), 63))]",
                "slug": "maria"
              },
              "mariadbVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariavn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariavn'), 128))]",
                "slug": "mariavn"
              },
              "mssqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqldb'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqldb'), 128))]",
                "slug": "sqldb"
              },
              "mssqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "mssqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "mysqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63))]",
                "slug": "mysqldb"
              },
              "mysqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128))]",
                "slug": "mysqlfw"
              },
              "mysqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysql'), 63))]",
                "slug": "mysql"
              },
              "mysqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128))]",
                "slug": "mysqlvn"
              },
              "networkInterface": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nic'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nic'), 80))]",
                "slug": "nic"
              },
              "networkSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsg'), 80))]",
                "slug": "nsg"
              },
              "networkSecurityGroupRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkSecurityRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkWatcher": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nw'), 80))]",
                "slug": "nw"
              },
              "notificationHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'nh'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'nh'), 260))]",
                "slug": "nh"
              },
              "notificationHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256))]",
                "slug": "dnsrec"
              },
              "notificationHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "pointToSiteVpnGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpngw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpngw'), 80))]",
                "slug": "vpngw"
              },
              "postgresqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psqldb'), 63))]",
                "slug": "psqldb"
              },
              "postgresqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128))]",
                "slug": "psqlfw"
              },
              "postgresqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psql'), 63))]",
                "slug": "psql"
              },
              "postgresqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128))]",
                "slug": "psqlvn"
              },
              "powerbiEmbedded": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pbi'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pbi'), 63))]",
                "slug": "pbi"
              },
              "privateDnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pdns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pdns'), 63))]",
                "slug": "pdns"
              },
              "publicIp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pip'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pip'), 80))]",
                "slug": "pip"
              },
              "publicIpPrefix": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pippf'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pippf'), 80))]",
                "slug": "pippf"
              },
              "redisCache": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'redis'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'redis'), 63))]",
                "slug": "redis"
              },
              "redisFirewallRule": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'redisfw'), 256)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'redisfw'), 256)]",
                "slug": "redisfw"
              },
              "relayHybridConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'rlhc'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'rlhc'), 260))]",
                "slug": "rlhc"
              },
              "relayNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'rln'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'rln'), 50))]",
                "slug": "rln"
              },
              "resourceGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nt'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nt'), variables('ph'), 'rg'), 90))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nut'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nut'), variables('ph'), 'rg'), 90))]",
                "slug": "rg"
              },
              "roleAssignment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'ra'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'ra'), 64))]",
                "slug": "ra"
              },
              "roleDefinition": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'rd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'rd'), 64))]",
                "slug": "rd"
              },
              "route": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'rt'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'rt'), 80))]",
                "slug": "rt"
              },
              "routeTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'route'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'route'), 80))]",
                "slug": "route"
              },
              "serviceFabricCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'sf'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'sf'), 23))]",
                "slug": "sf"
              },
              "serviceBusNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sb'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sb'), 50))]",
                "slug": "sb"
              },
              "serviceBusNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbar'), 50))]",
                "slug": "sbar"
              },
              "serviceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbq'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbq'), 260))]",
                "slug": "sbq"
              },
              "serviceBusQueueAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbqar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbqar'), 50))]",
                "slug": "sbqar"
              },
              "serviceBusSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbs'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbs'), 50))]",
                "slug": "sbs"
              },
              "serviceBusSubscriptionRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbsr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbsr'), 50))]",
                "slug": "sbsr"
              },
              "serviceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbt'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbt'), 260))]",
                "slug": "sbt"
              },
              "serviceBusTopicAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "sharedImage": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'si'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'si'), 80))]",
                "slug": "si"
              },
              "sharedImageGallery": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'sig'), 80)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'sig'), 80)]",
                "slug": "sig"
              },
              "signalrService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63))]",
                "slug": "sgnlr"
              },
              "snapshots": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snap'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snap'), 80))]",
                "slug": "snap"
              },
              "sqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "sqlFailoverGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63))]",
                "slug": "sqlfg"
              },
              "sqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128))]",
                "slug": "sqlfw"
              },
              "sqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "storageAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'st'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'st'), 24)]",
                "slug": "st"
              },
              "storageBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nt'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nt'), variables('ph'), 'blob'), 1024))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nut'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nut'), variables('ph'), 'blob'), 1024))]",
                "slug": "blob"
              },
              "storageContainer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stct'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stct'), 63))]",
                "slug": "stct"
              },
              "storageDataLakeGen2Filesystem": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stdl'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stdl'), 63))]",
                "slug": "stdl"
              },
              "storageQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stq'), 63))]",
                "slug": "stq"
              },
              "storageShare": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageShareDirectory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stt'), 63))]",
                "slug": "stt"
              },
              "streamAnalyticsFunctionJavascriptUdf": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asafunc'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asafunc'), 63))]",
                "slug": "asafunc"
              },
              "streamAnalyticsJob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asa'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asa'), 63))]",
                "slug": "asa"
              },
              "streamAnalyticsOutputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63))]",
                "slug": "asaoblob"
              },
              "streamAnalyticsOutputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63))]",
                "slug": "asaoeh"
              },
              "streamAnalyticsOutputMssql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63))]",
                "slug": "asaomssql"
              },
              "streamAnalyticsOutputServiceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63))]",
                "slug": "asaosbq"
              },
              "streamAnalyticsOutputServiceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63))]",
                "slug": "asaosbt"
              },
              "streamAnalyticsReferenceInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asarblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asarblob'), 63))]",
                "slug": "asarblob"
              },
              "streamAnalyticsStreamInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63))]",
                "slug": "asaiblob"
              },
              "streamAnalyticsStreamInputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaieh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaieh'), 63))]",
                "slug": "asaieh"
              },
              "streamAnalyticsStreamInputIotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63))]",
                "slug": "asaiiot"
              },
              "subnet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snet'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snet'), 80))]",
                "slug": "snet"
              },
              "templateDeployment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'deploy'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'deploy'), 64))]",
                "slug": "deploy"
              },
              "trafficManagerProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'traf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'traf'), 63))]",
                "slug": "traf"
              },
              "virtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "virtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              },
              "virtualNetwork": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vnet'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vnet'), 64))]",
                "slug": "vnet"
              },
              "virtualNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vgw'), 80))]",
                "slug": "vgw"
              },
              "virtualNetworkPeering": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpeer'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpeer'), 80))]",
                "slug": "vpeer"
              },
              "virtualWan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vwan'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vwan'), 80))]",
                "slug": "vwan"
              },
              "windowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "windowsVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              }
            }
          },
          "resources": [],
          "outputs": {
            "names": {
              "type": "object",
              "value": "[variables('names')]"
            },
            "regionAbbreviations": {
              "type": "object",
              "value": "[variables('regionAbbreviations')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}', parameters('applicationName'), parameters('environment')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "MainDeployment",
      "resourceGroup": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "naming": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))), 'Microsoft.Resources/deployments', 'NamingDeployment')).outputs.names.value]"
          },
          "tags": {
            "value": "[variables('defaultTags')]"
          },
          "jumphostAdministratorPassword": {
            "value": "[parameters('jumphostAdministratorPassword')]"
          },
          "sqlServerAdministratorPassword": {
            "value": "[parameters('sqlServerAdministratorPassword')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.5.6.12127",
              "templateHash": "18182896976323758765"
            }
          },
          "parameters": {
            "naming": {
              "type": "object"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object"
            },
            "jumphostAdministratorPassword": {
              "type": "secureString"
            },
            "sqlServerAdministratorPassword": {
              "type": "secureString"
            }
          },
          "variables": {
            "resourceNames": {
              "applicationGateway": "[parameters('naming').applicationGateway.name]",
              "bastion": "[parameters('naming').bastionHost.name]",
              "containerRegistry": "[parameters('naming').containerRegistry.name]",
              "frontendWebApp": "[replace(parameters('naming').appService.name, format('{0}-', parameters('naming').appService.slug), format('{0}-frontend-', parameters('naming').appService.slug))]",
              "storageAccount": "[parameters('naming').storageAccount.nameUnique]",
              "vnet": "[parameters('naming').virtualNetwork.name]",
              "keyVault": "[parameters('naming').keyVault.nameUnique]",
              "sqlServer": "[parameters('naming').mssqlServer.name]",
              "sqlDatabase": "[parameters('naming').mssqlDatabase.name]",
              "jumphostVirtualMachine": "[parameters('naming').windowsVirtualMachine.name]"
            },
            "sqlServerAdministratorLogin": "dbadmin",
            "isProd": "[contains(resourceGroup().name, 'prod')]",
            "secretNames": {
              "dataStorageConnectionString": "dataStorageConnectionString",
              "sqlConnectionString": "sqlConnectionString",
              "acrUsername": "acrUsername",
              "acrPassword": "acrPassword"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "vnet-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').vnet]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "addressPrefix": {
                    "value": "[if(variables('isProd'), '10.11.0.0/23', '10.10.0.0/23')]"
                  },
                  "defaultSnet": {
                    "value": {
                      "addressPrefix": "[if(variables('isProd'), '10.11.0.0/24', '10.10.0.0/24')]"
                    }
                  },
                  "appSnet": {
                    "value": {
                      "addressPrefix": "[if(variables('isProd'), '10.11.1.0/26', '10.10.1.0/26')]",
                      "privateEndpointNetworkPolicies": "Disabled"
                    }
                  },
                  "devOpsSnet": {
                    "value": {
                      "addressPrefix": "[if(variables('isProd'), '10.11.1.64/27', '10.10.1.64/27')]"
                    }
                  },
                  "frontendIntegrationSnet": {
                    "value": {
                      "addressPrefix": "[if(variables('isProd'), '10.11.1.96/27', '10.10.1.96/27')]",
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled"
                    }
                  },
                  "bastionSnet": {
                    "value": {
                      "addressPrefix": "[if(variables('isProd'), '10.11.1.128/27', '10.10.1.128/27')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "14534382543266442350"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "addressPrefix": {
                      "type": "string"
                    },
                    "includeBastion": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "defaultSnet": {
                      "type": "object"
                    },
                    "appSnet": {
                      "type": "object"
                    },
                    "devOpsSnet": {
                      "type": "object"
                    },
                    "bastionSnet": {
                      "type": "object"
                    },
                    "frontendIntegrationSnet": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "defaultSnetConfig": {
                      "name": "[format('{0}-default-snet', parameters('name'))]",
                      "properties": "[parameters('defaultSnet')]"
                    },
                    "appSnetConfig": {
                      "name": "[format('{0}-app-snet', parameters('name'))]",
                      "properties": "[parameters('appSnet')]"
                    },
                    "devOpsSnetConfig": {
                      "name": "[format('{0}-devops-snet', parameters('name'))]",
                      "properties": "[parameters('devOpsSnet')]"
                    },
                    "bastionSnetConfig": {
                      "name": "AzureBastionSubnet",
                      "properties": "[parameters('bastionSnet')]"
                    },
                    "frontendIntegrationSnetConfig": {
                      "name": "[format('{0}-frontend-integration-snet', parameters('name'))]",
                      "properties": "[parameters('frontendIntegrationSnet')]"
                    },
                    "fixedSubnets": [
                      "[variables('defaultSnetConfig')]",
                      "[variables('appSnetConfig')]",
                      "[variables('devOpsSnetConfig')]",
                      "[variables('frontendIntegrationSnetConfig')]"
                    ],
                    "allSubnets": "[if(parameters('includeBastion'), union(variables('fixedSubnets'), createArray(variables('bastionSnetConfig'))), variables('fixedSubnets'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[parameters('addressPrefix')]"
                          ]
                        },
                        "subnets": "[variables('allSubnets')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "vnetId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                    },
                    "defaultSnetId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name'))).subnets[0].id]"
                    },
                    "appSnetId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name'))).subnets[1].id]"
                    },
                    "devOpsSnetId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name'))).subnets[2].id]"
                    },
                    "frontendIntegrationSnetId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name'))).subnets[3].id]"
                    },
                    "bastionSnetId": {
                      "type": "string",
                      "value": "[if(parameters('includeBastion'), reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name'))).subnets[4].id, '')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "storage-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kind": {
                    "value": "StorageV2"
                  },
                  "skuName": {
                    "value": "Standard_LRS"
                  },
                  "name": {
                    "value": "[variables('resourceNames').storageAccount]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "13395113281533487299"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "allowedValues": [
                        "BlobStorage",
                        "BlockBlobStorage",
                        "FileStorage",
                        "Storage",
                        "StorageV2"
                      ]
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "allowedValues": [
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_GZRS",
                        "Standard_RAGRS",
                        "Standard_RAGZRS",
                        "Standard_ZRS"
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2019-06-01",
                      "name": "[toLower(replace(parameters('name'), '-', ''))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "tags": "[union(parameters('tags'), createObject('displayName', parameters('name')))]",
                      "properties": {
                        "accessTier": "Hot",
                        "supportsHttpsTrafficOnly": true
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', '')))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[toLower(replace(parameters('name'), '-', ''))]"
                    },
                    "apiVersion": {
                      "type": "string",
                      "value": "2019-06-01"
                    },
                    "primaryEndpoints": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', '')))).primaryEndpoints]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "containerRegistry-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').containerRegistry]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "skuName": {
                    "value": "Premium"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "18362594472194591779"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Basic",
                        "Standard",
                        "Premium"
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2021-12-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "properties": {
                        "adminUserEnabled": true,
                        "publicNetworkAccess": "Enabled",
                        "zoneRedundancy": "[if(parameters('zoneRedundant'), 'Enabled', 'Disabled')]",
                        "anonymousPullEnabled": false,
                        "networkRuleBypassOptions": "AzureServices"
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "apiVersion": {
                      "type": "string",
                      "value": "2021-12-01-preview"
                    },
                    "loginServer": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))).loginServer]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "containerRegistryPrivateDnsZone-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "privatelink.azurecr.io"
                  },
                  "vnetIds": {
                    "value": [
                      "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.vnetId.value]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "5244747416693156533"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "vnetIds": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "Global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "condition": "[not(empty(parameters('vnetIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('PrvDnsZoneLinks-Deployment-{0}', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "vnetIds": {
                            "value": "[parameters('vnetIds')]"
                          },
                          "registrationEnabled": {
                            "value": "[parameters('registrationEnabled')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.5.6.12127",
                              "templateHash": "15444291451217579106"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "registrationEnabled": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetIds": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateDnsZoneLinks",
                                "count": "[length(parameters('vnetIds'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), copyIndex())]",
                              "location": "Global",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "registrationEnabled": "[parameters('registrationEnabled')]",
                                "virtualNetwork": {
                                  "id": "[parameters('vnetIds')[copyIndex()]]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "ids": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('vnetIds'))))]",
                                "input": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[0], split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[1])]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "linkIds": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('PrvDnsZoneLinks-Deployment-{0}', parameters('name'))), '2020-10-01').outputs.ids.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "containerRegistryPrivateEndpoint-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('pe-{0}', reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.name.value)]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "privateDnsZoneId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistryPrivateDnsZone-deployment')).outputs.id.value]"
                  },
                  "privateLinkServiceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.id.value]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.appSnetId.value]"
                  },
                  "subResource": {
                    "value": "registry"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "9816512861441454078"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "privateLinkServiceId": {
                      "type": "string"
                    },
                    "privateDnsZoneId": {
                      "type": "string"
                    },
                    "subResource": {
                      "type": "string",
                      "allowedValues": [
                        "sites",
                        "sqlServer",
                        "mysqlServer",
                        "blob",
                        "file",
                        "queue",
                        "redisCache",
                        "registry",
                        "namespace",
                        "Sql"
                      ]
                    }
                  },
                  "variables": {
                    "privateLinkConnectionName": "[format('prvlnk-{0}', parameters('name'))]",
                    "privateDnsZoneConfigName": "[format('prvZoneConfig-{0}', parameters('name'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateLinkConnectionName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subResource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/dnsgroupname', parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[variables('privateDnsZoneConfigName')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'containerRegistryPrivateDnsZone-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "frontendWebApp-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').frontendWebApp]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "skuName": {
                    "value": "S1"
                  },
                  "subnetIdForIntegration": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.frontendIntegrationSnetId.value]"
                  },
                  "managedIdentity": {
                    "value": true
                  },
                  "appSettings": {
                    "value": [
                      {
                        "name": "StorageConnection",
                        "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('resourceNames').keyVault, variables('secretNames').dataStorageConnectionString)]"
                      },
                      {
                        "name": "SqlDbConnection",
                        "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('resourceNames').keyVault, variables('secretNames').sqlConnectionString)]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "3712763455853832182"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "appSettings": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "managedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Whether to create a managed identity for the web app -defaults to 'false'"
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "P1v3",
                      "allowedValues": [
                        "S1",
                        "S2",
                        "S3",
                        "P1v3",
                        "P2v3",
                        "P3v3"
                      ]
                    },
                    "subnetIdForIntegration": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The subnet Id to integrate the web app with -optional"
                      }
                    },
                    "containerApplicationTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The container to be deployed -fully qualified container tag expected."
                      }
                    }
                  },
                  "variables": {
                    "skuTier": "[if(equals(substring(parameters('skuName'), 0, 1), 'S'), 'Standard', 'PremiumV3')]",
                    "webAppServicePlanName": "[format('plan-{0}', parameters('name'))]",
                    "webAppInsName": "[format('appins-{0}', parameters('name'))]",
                    "createNetworkConfig": "[not(empty(parameters('subnetIdForIntegration')))]",
                    "linuxFxVersion": "[if(empty(parameters('containerApplicationTag')), 'DOCKER|mcr.microsoft.com/appsvc/staticsite:latest', format('DOCKER|{0}', parameters('containerApplicationTag')))]",
                    "networkConfigAppSettings": "[if(variables('createNetworkConfig'), createArray(createObject('name', 'WEBSITE_PULL_IMAGE_OVER_VNET', 'value', 'true'), createObject('name', 'WEBSITE_DNS_SERVER', 'value', '168.63.129.16')), createArray())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('webAppServicePlanName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[variables('skuTier')]"
                      },
                      "kind": "app,linux",
                      "properties": {
                        "reserved": true
                      }
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "[if(parameters('managedIdentity'), 'SystemAssigned', 'None')]"
                      },
                      "properties": {
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('webAppServicePlanName'))]",
                        "siteConfig": {
                          "linuxFxVersion": "[variables('linuxFxVersion')]",
                          "vnetRouteAllEnabled": true,
                          "appSettings": "[concat(createArray(createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', reference(resourceId('Microsoft.Resources/deployments', variables('webAppInsName'))).outputs.instrumentationKey.value), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', format('InstrumentationKey={0}', reference(resourceId('Microsoft.Resources/deployments', variables('webAppInsName'))).outputs.instrumentationKey.value))), variables('networkConfigAppSettings'), parameters('appSettings'))]"
                        },
                        "httpsOnly": true
                      },
                      "tags": "[union(createObject(format('hidden-related:{0}/providers/Microsoft.Web/serverfarms/{1}', resourceGroup().id, variables('webAppServicePlanName')), 'Resource'), parameters('tags'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/serverfarms', variables('webAppServicePlanName'))]",
                        "[resourceId('Microsoft.Resources/deployments', variables('webAppInsName'))]"
                      ]
                    },
                    {
                      "condition": "[variables('createNetworkConfig')]",
                      "type": "Microsoft.Web/sites/networkConfig",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/VirtualNetwork', parameters('name'))]",
                      "properties": {
                        "subnetResourceId": "[parameters('subnetIdForIntegration')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[variables('webAppInsName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('webAppInsName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "project": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.5.6.12127",
                              "templateHash": "6323123104113501165"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "project": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "variables": {
                            "workspaceName": "[format('log-{0}', parameters('name'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2020-08-01",
                              "name": "[variables('workspaceName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(parameters('tags'), createObject('displayName', variables('workspaceName'), 'projectName', parameters('project')))]",
                              "properties": {
                                "retentionInDays": 90,
                                "sku": {
                                  "name": "PerGB2018"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "kind": "web",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "Application_Type": "web",
                                "Request_Source": "rest",
                                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                            },
                            "instrumentationKey": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name'))).InstrumentationKey]"
                            },
                            "workspaceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "appServicePlanId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/serverfarms', variables('webAppServicePlanName'))]"
                    },
                    "identity": {
                      "type": "object",
                      "value": "[if(parameters('managedIdentity'), createObject('tenantId', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2021-03-01', 'full').identity.tenantId, 'principalId', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2021-03-01', 'full').identity.principalId, 'type', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2021-03-01', 'full').identity.type), createObject())]"
                    },
                    "applicationInsights": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('webAppInsName'))).outputs]"
                    },
                    "siteHostName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name'))).defaultHostName]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "websitesPrivateDnsZone-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "privatelink.azurewebsites.net"
                  },
                  "vnetIds": {
                    "value": [
                      "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.vnetId.value]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "5244747416693156533"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "vnetIds": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "Global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "condition": "[not(empty(parameters('vnetIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('PrvDnsZoneLinks-Deployment-{0}', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "vnetIds": {
                            "value": "[parameters('vnetIds')]"
                          },
                          "registrationEnabled": {
                            "value": "[parameters('registrationEnabled')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.5.6.12127",
                              "templateHash": "15444291451217579106"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "registrationEnabled": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetIds": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateDnsZoneLinks",
                                "count": "[length(parameters('vnetIds'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), copyIndex())]",
                              "location": "Global",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "registrationEnabled": "[parameters('registrationEnabled')]",
                                "virtualNetwork": {
                                  "id": "[parameters('vnetIds')[copyIndex()]]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "ids": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('vnetIds'))))]",
                                "input": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[0], split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[1])]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "linkIds": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('PrvDnsZoneLinks-Deployment-{0}', parameters('name'))), '2020-10-01').outputs.ids.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "frontendPrivateEndpoint-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('pe-{0}', reference(resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')).outputs.name.value)]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "privateDnsZoneId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'websitesPrivateDnsZone-deployment')).outputs.id.value]"
                  },
                  "privateLinkServiceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')).outputs.id.value]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.appSnetId.value]"
                  },
                  "subResource": {
                    "value": "sites"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "9816512861441454078"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "privateLinkServiceId": {
                      "type": "string"
                    },
                    "privateDnsZoneId": {
                      "type": "string"
                    },
                    "subResource": {
                      "type": "string",
                      "allowedValues": [
                        "sites",
                        "sqlServer",
                        "mysqlServer",
                        "blob",
                        "file",
                        "queue",
                        "redisCache",
                        "registry",
                        "namespace",
                        "Sql"
                      ]
                    }
                  },
                  "variables": {
                    "privateLinkConnectionName": "[format('prvlnk-{0}', parameters('name'))]",
                    "privateDnsZoneConfigName": "[format('prvZoneConfig-{0}', parameters('name'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateLinkConnectionName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subResource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/dnsgroupname', parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[variables('privateDnsZoneConfigName')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'websitesPrivateDnsZone-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "sqlServer-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').sqlServer]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "administratorLogin": {
                    "value": "[variables('sqlServerAdministratorLogin')]"
                  },
                  "administratorLoginPassword": {
                    "value": "[parameters('sqlServerAdministratorPassword')]"
                  },
                  "databaseName": {
                    "value": "[variables('resourceNames').sqlDatabase]"
                  },
                  "databaseSkuName": {
                    "value": "S1"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "15361222463342781726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "databaseName": {
                      "type": "string"
                    },
                    "administratorLogin": {
                      "type": "string",
                      "defaultValue": "dbadmin"
                    },
                    "administratorLoginPassword": {
                      "type": "secureString"
                    },
                    "enableTransparentDataEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Whether to enable Transparent Data Encryption -defaults to 'true'"
                      }
                    },
                    "databaseSkuName": {
                      "type": "string",
                      "defaultValue": "S1",
                      "allowedValues": [
                        "S0",
                        "S1",
                        "S2",
                        "S3",
                        "S4",
                        "S6",
                        "S7",
                        "S9",
                        "S12"
                      ]
                    },
                    "databaseCollation": {
                      "type": "string",
                      "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "administratorLogin": "[parameters('administratorLogin')]",
                        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                        "version": "12.0",
                        "minimalTlsVersion": "1.2"
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('databaseSkuName')]"
                      },
                      "properties": {
                        "collation": "[parameters('databaseCollation')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
                      "apiVersion": "2021-02-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), 'current')]",
                      "properties": {
                        "state": "[if(parameters('enableTransparentDataEncryption'), 'Enabled', 'Disabled')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers/databases', parameters('name'), parameters('databaseName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "apiVersion": {
                      "type": "string",
                      "value": "2021-02-01-preview"
                    },
                    "databaseId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('name'), parameters('databaseName'))]"
                    },
                    "fullyQualifiedDomainName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('name'))).fullyQualifiedDomainName]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "sqlServerPrivateDnsZone-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]"
                  },
                  "vnetIds": {
                    "value": [
                      "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.vnetId.value]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "5244747416693156533"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "vnetIds": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "Global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "condition": "[not(empty(parameters('vnetIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('PrvDnsZoneLinks-Deployment-{0}', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "vnetIds": {
                            "value": "[parameters('vnetIds')]"
                          },
                          "registrationEnabled": {
                            "value": "[parameters('registrationEnabled')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.5.6.12127",
                              "templateHash": "15444291451217579106"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "registrationEnabled": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetIds": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateDnsZoneLinks",
                                "count": "[length(parameters('vnetIds'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), copyIndex())]",
                              "location": "Global",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "registrationEnabled": "[parameters('registrationEnabled')]",
                                "virtualNetwork": {
                                  "id": "[parameters('vnetIds')[copyIndex()]]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "ids": {
                              "type": "array",
                              "copy": {
                                "count": "[length(range(0, length(parameters('vnetIds'))))]",
                                "input": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[0], split(format('{0}/{1}-link-{2}', parameters('privateDnsZoneName'), parameters('privateDnsZoneName'), range(0, length(parameters('vnetIds')))[copyIndex()]), '/')[1])]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "linkIds": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('PrvDnsZoneLinks-Deployment-{0}', parameters('name'))), '2020-10-01').outputs.ids.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "sqlServerPrivateEndpoint-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('pe-{0}', variables('resourceNames').sqlServer)]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "privateDnsZoneId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sqlServerPrivateDnsZone-deployment')).outputs.id.value]"
                  },
                  "privateLinkServiceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sqlServer-deployment')).outputs.id.value]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.appSnetId.value]"
                  },
                  "subResource": {
                    "value": "sqlServer"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "9816512861441454078"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "privateLinkServiceId": {
                      "type": "string"
                    },
                    "privateDnsZoneId": {
                      "type": "string"
                    },
                    "subResource": {
                      "type": "string",
                      "allowedValues": [
                        "sites",
                        "sqlServer",
                        "mysqlServer",
                        "blob",
                        "file",
                        "queue",
                        "redisCache",
                        "registry",
                        "namespace",
                        "Sql"
                      ]
                    }
                  },
                  "variables": {
                    "privateLinkConnectionName": "[format('prvlnk-{0}', parameters('name'))]",
                    "privateDnsZoneConfigName": "[format('prvZoneConfig-{0}', parameters('name'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateLinkConnectionName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subResource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/dnsgroupname', parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[variables('privateDnsZoneConfigName')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'sqlServer-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'sqlServerPrivateDnsZone-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "keyVault-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').keyVault]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "skuName": {
                    "value": "premium"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "accessPolicies": {
                    "value": [
                      {
                        "tenantId": "[reference(resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')).outputs.identity.value.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')).outputs.identity.value.principalId]",
                        "permissions": {
                          "secrets": [
                            "get"
                          ]
                        }
                      }
                    ]
                  },
                  "secrets": {
                    "value": [
                      {
                        "name": "[variables('secretNames').dataStorageConnectionString]",
                        "service": {
                          "type": "storageAccount",
                          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment')).outputs.name.value]",
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment')).outputs.id.value]",
                          "apiVersion": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment')).outputs.apiVersion.value]"
                        }
                      },
                      {
                        "name": "[variables('secretNames').acrUsername]",
                        "service": {
                          "type": "containerRegistry",
                          "secretType": "username",
                          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.name.value]",
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.id.value]",
                          "apiVersion": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.apiVersion.value]"
                        }
                      },
                      {
                        "name": "[variables('secretNames').acrPassword]",
                        "service": {
                          "type": "containerRegistry",
                          "secretType": "password",
                          "name": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.name.value]",
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.id.value]",
                          "apiVersion": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs.apiVersion.value]"
                        }
                      },
                      {
                        "name": "[variables('secretNames').sqlConnectionString]",
                        "value": "[format('Data Source=tcp:{0}, 1433;Initial Catalog={1};User Id={2}@{3};Password={4};', reference(resourceId('Microsoft.Resources/deployments', 'sqlServer-deployment')).outputs.fullyQualifiedDomainName.value, variables('resourceNames').sqlDatabase, variables('sqlServerAdministratorLogin'), variables('resourceNames').sqlServer, parameters('sqlServerAdministratorPassword'))]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "16471969976625418376"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "standard",
                      "allowedValues": [
                        "standard",
                        "premium"
                      ]
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Array of access policy configurations, schema ref: https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/vaults/accesspolicies?tabs=json#microsoftkeyvaultvaultsaccesspolicies-object"
                      }
                    },
                    "secrets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Secrets array with name/value pairs"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2019-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "[parameters('skuName')]"
                        },
                        "accessPolicies": "[parameters('accessPolicies')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "condition": "[not(empty(parameters('secrets')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "keyvault-secrets",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "secrets": {
                            "value": "[parameters('secrets')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.5.6.12127",
                              "templateHash": "3200587908657176348"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "secrets": {
                              "type": "array",
                              "metadata": {
                                "description": "Array of name/value pairs"
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "keyVaultSecrets",
                                "count": "[length(parameters('secrets'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('keyVaultSecret-{0}-Deployment', parameters('secrets')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "keyVaultName": {
                                    "value": "[parameters('keyVaultName')]"
                                  },
                                  "name": {
                                    "value": "[parameters('secrets')[copyIndex()].name]"
                                  },
                                  "value": {
                                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'value'), parameters('secrets')[copyIndex()].value, '')]"
                                  },
                                  "serviceMetadata": {
                                    "value": "[if(contains(parameters('secrets')[copyIndex()], 'service'), parameters('secrets')[copyIndex()].service, createObject())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.5.6.12127",
                                      "templateHash": "16350678012949420592"
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Key Vault's name"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret in Key Vault."
                                      }
                                    },
                                    "value": {
                                      "type": "secureString",
                                      "defaultValue": ""
                                    },
                                    "serviceMetadata": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "deploy": "[or(not(empty(parameters('value'))), not(empty(parameters('serviceMetadata'))))]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[variables('deploy')]",
                                      "type": "Microsoft.KeyVault/vaults/secrets",
                                      "apiVersion": "2018-02-14",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "properties": {
                                        "value": "[if(not(empty(parameters('value'))), createObject('value', parameters('value')), if(equals(parameters('serviceMetadata').type, 'storageAccount'), createObject('value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('serviceMetadata').name, listKeys(parameters('serviceMetadata').id, parameters('serviceMetadata').apiVersion).keys[0].value)), if(equals(parameters('serviceMetadata').type, 'redisCache'), createObject('value', format('{0}.redis.cache.windows.net,abortConnect=false,ssl=true,password={1}', parameters('serviceMetadata').name, listKeys(parameters('serviceMetadata').id, parameters('serviceMetadata').apiVersion).primaryKey)), if(equals(parameters('serviceMetadata').type, 'serviceBus'), createObject('value', listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', parameters('serviceMetadata').name, parameters('serviceMetadata').sasKeyName), parameters('serviceMetadata').apiVersion).primaryConnectionString), if(equals(parameters('serviceMetadata').type, 'containerRegistry'), createObject('value', if(equals(parameters('serviceMetadata').secretType, 'password'), listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('serviceMetadata').name), parameters('serviceMetadata').apiVersion).passwords[0].value, listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('serviceMetadata').name), parameters('serviceMetadata').apiVersion).username)), createObject('value', format('[[serviceMetadata.type \"{0}\" was unknown]]', parameters('serviceMetadata').type))))))).value]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', parameters('keyVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('keyVaultName'), parameters('name')), '/')[1])]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "type": {
                                      "type": "string",
                                      "value": "Microsoft.KeyVault/vaults/secrets"
                                    },
                                    "props": {
                                      "type": "object",
                                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', parameters('keyVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('keyVaultName'), parameters('name')), '/')[1]), '2018-02-14')]"
                                    },
                                    "reference": {
                                      "type": "string",
                                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "secrets": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('secrets'))]",
                                "input": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVaultSecret-{0}-Deployment', parameters('secrets')[copyIndex()].name))).outputs]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "secrets": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyvault-secrets'), '2020-10-01').outputs.secrets.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'sqlServer-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "jumphost-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').jumphostVirtualMachine]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "adminPassword": {
                    "value": "[parameters('jumphostAdministratorPassword')]"
                  },
                  "dnsLabelPrefix": {
                    "value": "[variables('resourceNames').jumphostVirtualMachine]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.devOpsSnetId.value]"
                  },
                  "includeVsCode": {
                    "value": false
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "12294546272367784403"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 15,
                      "minLength": 3
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "adminUserName": {
                      "type": "string",
                      "defaultValue": "vmadmin"
                    },
                    "adminPassword": {
                      "type": "secureString"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "dnsLabelPrefix": {
                      "type": "string"
                    },
                    "includePublicIp": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "includeVsCode": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "windowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2019-Datacenter",
                      "metadata": {
                        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
                      },
                      "allowedValues": [
                        "2008-R2-SP1",
                        "2012-Datacenter",
                        "2012-R2-Datacenter",
                        "2016-Nano-Server",
                        "2016-Datacenter-with-Containers",
                        "2016-Datacenter",
                        "2019-Datacenter"
                      ]
                    },
                    "vmSize": {
                      "type": "string",
                      "defaultValue": "Standard_D2_v3",
                      "metadata": {
                        "description": "Size of the virtual machine."
                      }
                    }
                  },
                  "variables": {
                    "resourceNames": {
                      "storageAccount": "[format('st{0}', parameters('name'))]",
                      "nic": "[format('nic-{0}', parameters('name'))]",
                      "publicIP": "[format('pip-{0}', parameters('name'))]",
                      "networkSecurityGroup": "default-nsg"
                    },
                    "nicIpConfigurationDefaults": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    },
                    "nicIpConfigurationWithPip": {
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP)]"
                      }
                    },
                    "nicIpConfigurationProperties": "[if(parameters('includePublicIp'), variables('nicIpConfigurationDefaults'), union(variables('nicIpConfigurationDefaults'), variables('nicIpConfigurationWithPip')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('resourceNames').networkSecurityGroup]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "default-allow-3389",
                            "properties": {
                              "priority": 1000,
                              "access": "Allow",
                              "direction": "Inbound",
                              "destinationPortRange": "3389",
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "*"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[parameters('includePublicIp')]",
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('resourceNames').publicIP]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publicIPAllocationMethod": "Dynamic",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('resourceNames').nic]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": "[variables('nicIpConfigurationProperties')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP)]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('name')]",
                          "adminUsername": "[parameters('adminUserName')]",
                          "adminPassword": "[parameters('adminPassword')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "[parameters('windowsOSVersion')]",
                            "version": "latest"
                          },
                          "osDisk": {
                            "createOption": "FromImage"
                          },
                          "dataDisks": [
                            {
                              "diskSizeGB": 1023,
                              "lun": 0,
                              "createOption": "Empty"
                            }
                          ]
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('resourceNames').nic)]"
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[reference(resourceId('Microsoft.Resources/deployments', format('storageAccount-{0}', variables('resourceNames').storageAccount))).outputs.primaryEndpoints.value.blob]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', variables('resourceNames').nic)]",
                        "[resourceId('Microsoft.Resources/deployments', format('storageAccount-{0}', variables('resourceNames').storageAccount))]"
                      ]
                    },
                    {
                      "condition": "[parameters('includeVsCode')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/config-app', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "commandToExecute": "powershell -ExecutionPolicy Unrestricted -File ./Install-VSCode.ps1 -EnableContextMenus",
                          "fileUris": [
                            "https://raw.githubusercontent.com/PowerShell/vscode-powershell/master/scripts/Install-VSCode.ps1"
                          ]
                        },
                        "protectedSettings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('storageAccount-{0}', variables('resourceNames').storageAccount)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('resourceNames').storageAccount]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.5.6.12127",
                              "templateHash": "13395113281533487299"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "StorageV2",
                              "allowedValues": [
                                "BlobStorage",
                                "BlockBlobStorage",
                                "FileStorage",
                                "Storage",
                                "StorageV2"
                              ]
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard_LRS",
                              "allowedValues": [
                                "Premium_LRS",
                                "Premium_ZRS",
                                "Standard_LRS",
                                "Standard_GRS",
                                "Standard_GZRS",
                                "Standard_RAGRS",
                                "Standard_RAGZRS",
                                "Standard_ZRS"
                              ]
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2019-06-01",
                              "name": "[toLower(replace(parameters('name'), '-', ''))]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "tags": "[union(parameters('tags'), createObject('displayName', parameters('name')))]",
                              "properties": {
                                "accessTier": "Hot",
                                "supportsHttpsTrafficOnly": true
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', '')))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[toLower(replace(parameters('name'), '-', ''))]"
                            },
                            "apiVersion": {
                              "type": "string",
                              "value": "2019-06-01"
                            },
                            "primaryEndpoints": {
                              "type": "object",
                              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(replace(parameters('name'), '-', '')))).primaryEndpoints]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "hostname": {
                      "type": "string",
                      "value": "[if(parameters('includePublicIp'), reference(resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP), '2020-06-01').dnsSettings.fqdn, reference(resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP), '2020-06-01').ipAddress)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "applicationGateway-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').applicationGateway]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "dnsLabelPrefix": {
                    "value": "[variables('resourceNames').frontendWebApp]"
                  },
                  "frontendWebAppFqdn": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')).outputs.siteHostName.value]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.defaultSnetId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "17937158524153424083"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "dnsLabelPrefix": {
                      "type": "string"
                    },
                    "frontendWebAppFqdn": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "resourceNames": {
                      "publicIP": "[format('pip-{0}', parameters('name'))]",
                      "backendAddressPool": "[format('beap-frontendwebapp-{0}', parameters('name'))]",
                      "frontendPort80": "[format('feport-{0}-80', parameters('name'))]",
                      "frontendIpConfiguration": "[format('feip-{0}', parameters('name'))]",
                      "backendHttpSettingFor443": "[format('be-htst-{0}-443', parameters('name'))]",
                      "httpListener": "[format('httplstn-{0}', parameters('name'))]",
                      "requestRoutingRule": "[format('rqrt-{0}', parameters('name'))]",
                      "redirectConfiguration": "[format('rdrcfg-{0}', parameters('name'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('resourceNames').publicIP]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "sku": {
                          "name": "WAF_v2",
                          "tier": "WAF_v2"
                        },
                        "autoscaleConfiguration": {
                          "minCapacity": 1,
                          "maxCapacity": 4
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "[format('{0}-ip-configuration', parameters('name'))]",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "[variables('resourceNames').frontendIpConfiguration]",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP)]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[variables('resourceNames').frontendPort80]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "[variables('resourceNames').backendAddressPool]",
                            "properties": {
                              "backendAddresses": [
                                {
                                  "fqdn": "[parameters('frontendWebAppFqdn')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[variables('resourceNames').backendHttpSettingFor443]",
                            "properties": {
                              "port": 443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "pickHostNameFromBackendAddress": true,
                              "requestTimeout": 120
                            }
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "[variables('resourceNames').httpListener]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('name'), variables('resourceNames').frontendIpConfiguration)]"
                              },
                              "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', parameters('name'), variables('resourceNames').frontendPort80)]"
                              },
                              "protocol": "Http",
                              "sslCertificate": null
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "[variables('resourceNames').requestRoutingRule]",
                            "properties": {
                              "ruleType": "Basic",
                              "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('name'), variables('resourceNames').httpListener)]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('name'), variables('resourceNames').backendAddressPool)]"
                              },
                              "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('name'), variables('resourceNames').backendHttpSettingFor443)]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('resourceNames').publicIP)]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "bastion-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').bastion]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment')).outputs.bastionSnetId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.5.6.12127",
                      "templateHash": "10505536132199092160"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2020-06-01",
                      "name": "[format('pip-{0}', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Static"
                      }
                    },
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "IpConf",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              },
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('pip-{0}', parameters('name')))]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', format('pip-{0}', parameters('name')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "ipAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', format('pip-{0}', parameters('name')))).ipAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
              ]
            }
          ],
          "outputs": {
            "containerRegistry": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry-deployment')).outputs]"
            },
            "frontendWebApp": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'frontendWebApp-deployment')).outputs]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment')).outputs.name.value]"
            },
            "sqlServer": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sqlServer-deployment')).outputs]"
            },
            "jumphost": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'jumphost-deployment')).outputs]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))), 'Microsoft.Resources/deployments', 'NamingDeployment')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}', parameters('applicationName'), parameters('environment')))]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupId": {
      "type": "string",
      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}-{1}', parameters('applicationName'), parameters('environment')))]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}-{1}', parameters('applicationName'), parameters('environment'))), 'Microsoft.Resources/deployments', 'MainDeployment')).outputs.storageAccountName.value]"
    }
  }
}